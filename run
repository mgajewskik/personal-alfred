#!/usr/bin/env bash

set -o errexit
set -o pipefail

PROJECT=service
PYTHON_VERSION=3.9.16
TF_VERSION=1.3.6
BASE_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
PROJECT_DIR=$BASE_DIR/$PROJECT
TF_DIR=$BASE_DIR/infra/terraform

function _dir {
	# make sure that running path is a base directory
	# useful for nected functions that are changing dirs
	cd "$BASE_DIR"
}

function install {
	# create poetry venv and install all dependencies
	_dir
	echo "$PYTHON_VERSION" >.python-version
	# poetry env use python3.9
	poetry install

	echo "$TF_VERSION" >"$TF_DIR"/.terraform-version
	echo "poetry venv created, run shell to activate"
}

function shell {
	# open shell in poetry venv
	_dir
	poetry shell
}

function _requirements {
	# generate requirements.txt from poetry.lock
	_dir
	poetry export --without-hashes --format=requirements.txt | sed -e 's/;.*//' >requirements.txt
	echo "requirements.txt generated from pyproject.toml"
}

function clean {
	# remove build artifacts
	_dir
	rm -rf "$BASE_DIR"/infra/terraform/layer.zip
	rm -rf "$BASE_DIR"/infra/terraform/lambda.zip
	echo "old zip packages removed"
	rm -rf requirements.txt
	echo "requirements.txt removed"
}

function build {
	# build package
	# TODO this method does not support deployment only when changes occurred
	clean
	_requirements
	pip install --target "$BASE_DIR"/infra/package/zip/python/lib/python3.9/site-packages -r requirements.txt
	echo "packages installed into infra/package/zip/python/lib/python3.9/site-packages"

	cd "$BASE_DIR"/infra/package/zip
	zip -r "$BASE_DIR"/infra/terraform/layer.zip . -x **/__pycache__/**\*
	echo "layer.zip created"
	cd "$BASE_DIR"
	zip -r "$BASE_DIR"/infra/terraform/lambda.zip ./"$PROJECT" -x **/__pycache__/**\*
	echo "lambda.zip created"

	rm -rf "$BASE_DIR"/infra/package
	echo "package folder removed"
}

function plan {
	# run terraform plan
	cd "$TF_DIR"
	terraform init -reconfigure
	terraform plan
}

function cost {
    export DISABLE_TELEMETRY=true
	# check infra costs based on downloaded real usage data and provided estimations
	# this overwrites manual entries for lambda, dynamo, s3, EKS, autoscalling
	# flag --sync-usage-file is using AWS credentials to download real usage data
	infracost breakdown \
		--path "$TF_DIR" \
		--usage-file "$BASE_DIR"/infra/infracost-usage.yml \
		--sync-usage-file
}

function deploy {
	# deploy stateful terraform infrastructure
	build
	cd "$TF_DIR"
	terraform init -reconfigure
	terraform apply -auto-approve
}

function output {
	# output terraform outputs
	cd "$TF_DIR"
	terraform output "$@"
}

function destroy {
	# destroy stateful terraform infrastructure
	cd "$TF_DIR"
	terraform destroy -auto-approve
}

function test {
	# run tests
	_dir
	poetry run pytest
}

function cov {
	# run tests with coverage
	_dir
	poetry run pytest --cov "${@}"
}

function help {
	printf "%s <task> [args]\n\nTasks:\n" "${0}"
	compgen -A function | grep -v "^_" | cat -n
	printf "\nExtended help:\n  Each task has comments for general usage\n"
}

TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
