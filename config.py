import argparse
import json
import pathlib
import subprocess

SERVICE_NAME = "alfred"
BASE_DIR = pathlib.Path(__file__).parent.resolve()
CHALICE_CONFIG_PATH = BASE_DIR.joinpath("service/.chalice/config.json")
INFRA = BASE_DIR.joinpath("infra")
SERVICE_INFRA = BASE_DIR.joinpath("service/infra")
TF_CONFIG = SERVICE_INFRA.joinpath("chalice.tf.json")

CHALICE_CONFIG = {
    "version": "2.0",
    "app_name": SERVICE_NAME,
    "stages": {
        "dev": {
            # "autogen_policy": True,
            "api_gateway_stage": "api",
            "api_gateway_endpoint_type": "REGIONAL",
            "api_gateway_custom_domain": {},
            "automatic_layer": True,
            "environment_variables": {"ENV": "dev", "SOURCE": "lambda"},
            "tags": {"onset": "chalice"},
        }
    },
}

TF_BACKEND = {
    "backend": {
        "remote": {
            "hostname": "app.terraform.io",
            "organization": "mgajewskik",
            "workspaces": {"name": "alfred-service-chalice-stateless"},
        }
    }
}


def get_tf_output():
    return json.loads(
        subprocess.run(
            ["terraform", "output", "-json"],
            check=True,
            cwd=INFRA,
            capture_output=True,
        ).stdout
    )


def update_chalice_env(config: dict, tf_output: dict):
    env = {}
    for key in tf_output.keys():
        env.update({key.upper(): tf_output[key]["value"]})

    config["stages"]["dev"]["environment_variables"].update(env)


def write_chalice_config():
    # https://aws.github.io/chalice/topics/configfile.html
    # config = json.loads(CHALICE_CONFIG_PATH.read_text())
    config = CHALICE_CONFIG
    tf_output = get_tf_output()

    update_chalice_env(config, tf_output)

    config["stages"]["dev"]["api_gateway_custom_domain"].update(
        {
            "domain_name": tf_output["domain_name"]["value"],
            "certificate_arn": tf_output["certificate_arn"]["value"],
        }
    )

    config["stages"]["dev"]["tags"].update({})

    with open(CHALICE_CONFIG_PATH, "w") as f:
        json.dump(config, f, indent=2)


def update_terraform_provider(config: dict):
    provider = {"provider": {"aws": {"region": "eu-west-1", "max_retries": 10}}}
    config.update(provider)


def update_terraform_dependencies(config: dict):
    config["resource"]["aws_api_gateway_base_path_mapping"][
        "api_gateway_custom_domain_mapping"
    ].update({"depends_on": ["aws_api_gateway_deployment.rest_api"]})


def update_terraform_config():
    terraform = json.loads(TF_CONFIG.read_text())

    terraform["terraform"].update(TF_BACKEND)
    update_terraform_provider(terraform)
    update_terraform_dependencies(terraform)

    with open(TF_CONFIG, "w") as f:
        json.dump(terraform, f, indent=2)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--chalice", action="store_true", help="Populate Chalice config.json."
    )
    parser.add_argument(
        "--backend",
        action="store_true",
        help="Configure backend in Terraform file generated by Chalice.",
    )

    args = parser.parse_args()

    if args.chalice:
        write_chalice_config()
    elif args.backend:
        update_terraform_config()
    else:
        print("Nofunction specified, please read the docs.")
